from keys import api, secret
from binance.um_futures import  UMFutures
import logging
import ta
import pandas as pd
from time import sleep
from binance.error import ClientError
import binance.um_futures as client



client = UMFutures(key = api, secret=secret)

tp = 0.01
sl = 0.01
volume = 15
leverage = 25
type = ('ISOLATED')

def get_balance_usdt():
    try:
        response = client.balance(recvWindow=6000)
        for elem in response:
            if elem['asset'] == 'USDT':
                return float(elem['balance'])
    except ClientError as error:
        print(
            "Found error. status: {}, error code: {}, error message: {}".format(
                error.status_code, error.error_code, error.error_message
            )
        )

print("My balance is: ", get_balance_usdt(), " USDT")

#Összes kereskedési pár ('BTCUSDT', 'ETHUSDT', ....)
def get_tickers_usdt():
    tickers = []
    resp = client.ticker_price()
    for elem in resp:
        if 'USDT' in elem['symbol']:
            tickers.append(elem['symbol'])
    return tickers
def klines(symbol):
    try:
        resp = pd.DataFrame(client.klines(symbol, '5m'))
        resp = resp.iloc[:,:6]
        resp.columns = ['Time', 'Open', 'High', 'Low', 'Close', 'Volume']
        resp = resp.set_index('Time')
        resp.index = pd.to_datetime(resp.index, unit = 'ms')
        resp = resp.astype(float)
        return resp
    except ClientError as error:
        print(
            "Found error. status: {}, error code: {}, error message: {}".format(
                error.status_code, error.error_code, error.error_message
            )
        )

print(klines('BTCUSDT'))

def set_leverage(symbol, level):
    try:
        response = client.change_leverage(
            symbol=symbol, leverage=level, recvWindow=6000
        )
        #print(response)
    except ClientError as error:
        print(
            "Found error. status: {}, error code: {}, error message: {}".format(
                error.status_code, error.error_code, error.error_message
            )
        )

def set_mode(symbol, type):
    try:
        response = client.change_margin_type(
            symbol=symbol, marginType=type, recvWindow=6000
        )
        #print(response)
    except ClientError as error:
        print(
            "Found error. status: {}, error code: {}, error message: {}".format(
                error.status_code, error.error_code, error.error_message
            )
        )
# Price precision. BTC has 1, XRP has 4
def get_price_precision(symbol):
    resp = client.exchange_info()['symbols']
    for elem in resp:
        if elem['symbol'] == symbol:
            return elem['pricePrecision']

# Amount precision. BTC has 3, XRP has 1
def get_qty_precision(symbol):
    resp = client.exchange_info()['symbols']
    for elem in resp:
        if elem['symbol'] == symbol:
            return elem['quantityPrecision']


# Open new order with the last price, and set TP and SL:
def open_order(symbol, side):
    price = float(client.ticker_price(symbol)['price'])
    qty_precision = get_qty_precision(symbol)
    price_precision = get_price_precision(symbol)
    qty = round(volume/price, qty_precision)
    if side == 'buy':
        try:
            resp1 = client.new_order(symbol=symbol, side='BUY', type='LIMIT', quantity=qty, timeInForce='GTC',
                                     price=price, margintype='ISOLATED')
            print(symbol, side, "Megbizas elhelyezve")
            order_id = resp1['orderId']

            sleep(2)
            sl_price = round(price - price * sl, price_precision)

            # Stop loss Order elhelyezése(ELADÁS):
            resp2 = client.new_order(symbol=symbol, side='SELL', type='STOP_MARKET', quantity=qty, timeInForce='GTC',
                                     stopPrice=sl_price)
            order_slid = resp2['orderId']
            print(resp2)


            sleep(2)
            tp_price = round(price + price * tp, price_precision)

            # Take profit order elhelyezése(ELADÁS):
            resp3 = client.new_order(symbol=symbol, side='SELL', type='TAKE_PROFIT_MARKET', quantity=qty,
                                     timeInForce='GTC',
                                     stopPrice=tp_price)
            order_tpid = resp3['orderId']
            print(resp3)


        except ClientError as error:
            print(
                "Found error. status: {}, error code: {}, error message: {}".format(
                    error.status_code, error.error_code, error.error_message
                )
            )

    if side == 'sell':
        try:
            resp1 = client.new_order(symbol=symbol, side='SELL', type='LIMIT', quantity=qty, timeInForce='GTC',
                                     price=price)
            print(symbol, side, "placing order")
            print(resp1)
            order_id = resp1['orderId']

            sleep(2)
            sl_price = round(price + price * sl, price_precision)

            # Stop loss Order elhelyezése(VÉTEL):
            resp2 = client.new_order(symbol=symbol, side='BUY', type='STOP_MARKET', quantity=qty, timeInForce='GTC',
                                     stopPrice=sl_price)
            print(resp2)

            sleep(2)
            tp_price = round(price - price * tp, price_precision)

            # Take profit order elhelyezése(VÉTEL):
            resp3 = client.new_order(symbol=symbol, side='BUY', type='TAKE_PROFIT_MARKET', quantity=qty,
                                     timeInForce='GTC',
                                     stopPrice=tp_price)
            print(resp3)

        except ClientError as error:
            print(
                "Found error. status: {}, error code: {}, error message: {}".format(
                    error.status_code, error.error_code, error.error_message
                )
            )

def get_pos():
    try:
        resp = client.get_position_risk()
        pos = []
        for elem in resp:
            if float(elem['positionAmt']) != 0:
                pos.append(elem['symbol'])
        return pos
    except ClientError as error:
        print(
            "Found error. status: {}, error code: {}, error message: {}".format(
                error.status_code, error.error_code, error.error_message
            )
        )
# Eredeti youtube-os check_order függvény:
def check_orders():
    try:
        response = client.get_orders(recvWindow=6000)
        sym = []
        for elem in response:
            sym.append(elem['symbol'])
        return sym
    except ClientError as error:
        print(
            "Found error. status: {}, error code: {}, error message: {}".format(
                error.status_code, error.error_code, error.error_message
            )
        )



# Close open orders for the needed symbol. If one stop order is executed and another one is still there
def close_open_orders(symbol):
        try:
            response = client.cancel_open_orders(symbol=symbol, recvWindow=6000)
            print(response)
        except ClientError as error:
            print(
                "Found error. status: {}, error code: {}, error message: {}".format(
                    error.status_code, error.error_code, error.error_message
                )
            )

def rsi_signal(symbol):
    # Klines adatok lekérdezése
    kl = klines(symbol)

    # RSI kiszámítása
    rsi = ta.momentum.RSIIndicator(kl.Close).rsi()

    # Jelzés kiszámítása
    if rsi.iloc[-1] > 50 and rsi.iloc[-2] > 50 and rsi.iloc[-3] > 50:
        return 'up'
    if rsi.iloc[-1] < 50 and rsi.iloc[-2] < 50 and rsi.iloc[-3] < 50:
        return 'down'
    else:
        return 'none'

def ema200_50(symbol):
    kl = klines(symbol)
    ema200 = ta.trend.ema_indicator(kl.Close, window=200)
    ema50 = ta.trend.ema_indicator(kl.Close, window=50)

    current_ema50 = ema50.iloc[-1]
    current_ema200 = ema200.iloc[-1]

    if current_ema50 > current_ema200:
        return 'up'
    elif current_ema50 < current_ema200:
        return 'down'
    else:
        return 'none'

# trade signal, ez nézi hogy nincs e ellentmondás
def trade_signal(symbol):
    rsi_sig = rsi_signal(symbol)
    ema_sig = ema200_50(symbol)

# Jelkiírás:
#     print(f"RSI Signal: {rsi_sig}")
#     print(f"EMA Signal: {ema_sig}")

    if rsi_sig == ema_sig:
        return rsi_sig
    else:
        return "none"

orders = 0
symbol = ''
# getting all symbols from Binace Futures list:
symbols = get_tickers_usdt()

while True:
    #
    # # Take profit megbízás azonosítójának lekérdezése
    # tp_order_id = get_order_id_by_type(symbol, 'TAKE_PROFIT_MARKET')
    #
    # # Stop-loss megbízás azonosítójának lekérdezése
    # sl_order_id = get_order_id_by_type(symbol, 'STOP_MARKET')
    #
    # # Take profit megbízás állapotának ellenőrzése
    # tp_order_status = get_order_status(symbol, tp_order_id)
    #
    # # Stop-loss megbízás állapotának ellenőrzése
    # sl_order_status = get_order_status(symbol, sl_order_id)
    #
    # if tp_order_id == 'FILLED':
    #     close_order(symbol, sl_order_id)
    #     print(f"Stop-loss megbízás lezárva: {sl_order_id}")
    #
    # if sl_order_id == 'FILLED':
    #     close_order(symbol, tp_order_id)
    #     print(f"Take profit megbízás lezárva: {tp_order_id}")

    # we need to get balance to check if the connection is good, or you have all the needed permissions
    balance = get_balance_usdt()
    sleep(1)
    if balance == None:
        print('Cant connect to API. Check IP, restrictions or wait some time')
    if balance != None:
        print("My balance is: ", balance, " USDT")
        # getting position list:
        pos = []
        pos = get_pos()
        print(f'Van {len(pos)} nyitott poziciód\n{pos}')
        # Getting order list
        ord = []
        ord = check_orders()
        print(f'Van {len(ord)} nyitott ordered\n{ord}')


        qty = 1  # Legfeljebb ennyi nyitott pozíció engedélyezett
        if len(pos) < qty:
            for elem in symbols:
                signal = trade_signal(elem)

                # 'up' or 'down' signal, we place orders for symbols that arent in the opened positions and orders
                # we also dont need USDTUSDC because its 1:1 (dont need to spend money for the commission)
                if signal == 'up' and elem != 'USDCUSDT' and not elem in pos and not elem in ord and elem != symbol:
                    print('Veteli jelet talaltam: ', elem)
                    set_mode(elem, type)
                    sleep(1)
                    set_leverage(elem, leverage)
                    sleep(1)
                    print('Megbizás elhelyezve ehhez: ', elem)
                    open_order(elem, 'buy')
                    symbol = elem
                    order = True
                    pos = get_pos()
                    sleep(1)
                    ord = check_orders()
                    sleep(1)
                    sleep(10)
                    # break
                if signal == 'down' and elem != 'USDCUSDT' and not elem in pos and not elem in ord and elem != symbol:
                    print('Eladasi jelet talalam: ', elem)
                    set_mode(elem, type)
                    sleep(1)
                    set_leverage(elem, leverage)
                    sleep(1)
                    print('Megbízás elhelyezve ehhez: ', elem)
                    open_order(elem, 'sell')
                    symbol = elem
                    order = True
                    pos = get_pos()
                    sleep(1)
                    ord = check_orders()
                    sleep(1)
                    sleep(10)
                    # break



    def check_orders(symbol):

        orders = client.get_orders(symbol=symbol, recvWindow=6000)
        filled_orders = [order for order in orders if order['status'] == 'FILLED']

        price = float(client.ticker_price(symbol)['price'])
        resp1 = client.new_order(symbol=symbol, side='BUY', type='LIMIT', quantity=qty, timeInForce='GTC',
                                 price=price, margintype='ISOLATED')

        price_precision = get_price_precision(symbol)
        sl_price = round(price - price * sl, price_precision)
        resp2 = client.new_order(symbol=symbol, side='SELL', type='STOP_MARKET', quantity=qty, timeInForce='GTC',
                                 stopPrice=sl_price)
        order_slid = resp2['orderId']

        tp_price = round(price + price * tp, price_precision)
        resp3 = client.new_order(symbol=symbol, side='SELL', type='TAKE_PROFIT_MARKET', quantity=qty,
                                 timeInForce='GTC',
                                 stopPrice=tp_price)

        order_id = resp1['orderId']
        if filled_orders:
            filled_order_id = filled_orders[0]['clientOrderId']
            if order_slid == order_id:
                # Törölje a stop-loss megbízást
                client.cancel_order(symbol=symbol, orderId=resp2['orderId'])
                print(f"Bentmaradt stop-loss törlese: {symbol}")
            else:
                # Törölje a take-profit megbízást
                client.cancel_order(symbol=symbol, orderId=resp3['orderId'])
                print(f"Bentmaradt take-profit order törlese: {symbol}")


    while True:
        check_orders(symbol)
        sleep(10)

    print('3perc varakozas')
    sleep(180)
